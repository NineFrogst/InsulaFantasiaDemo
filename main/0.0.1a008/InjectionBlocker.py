'''
tbd
因为想赶快吧GameSys做出来，很多地方没处理，到时候用这里统一处理
主要是避免在调用数值的时候，优先运行程序了的问题
到时候修的时候记得尽量把eval换成int、str之类的

yysy编程我已经快麻了，反注入啥的真的麻烦啊
我一不是计算机系，二不经常编程，python会一点还是因为要考计算机二级（然而错过两次报名了，第一次考还发烧了）
结果80%的运用还是现学的……所以全是屎山，SquadSys那里尤其……
来个大佬接手吧･ﾟ( ﾉд`ﾟ)我已经尽力往PEP8上靠了
'''

# 卡牌效果转义程序

'''
为了避免记录在数据库里的卡牌能力发生字符串注入，在此重新设计一套卡牌效果的书写规范，并实现这种类自然语言的文本与可运行程序之间的转义。
同时用这种轻量化的语言风格，设计技能时便能直接测试效果，而不需要较高的编程思维与能力。

需要强调的设计前提：
1. 所有的行动均以卡牌的形式呈现。
2. 简单的效果，如数值的加减乘除或召唤新实体，可以直接编写，否则复杂效果需要嵌套多张卡牌（函数）。
3. 即使是类似自然语言，书写规范也需要符合条例，避免歧义也有利于程序执行。
4. 避免设计过于复杂的能力，使得游戏性和设计性本末倒置了（反例：三国杀武将技能）。

从程序实现上讲，卡牌有几个基本的使用效果：
伤害：调用实体的takeDamage()方法，降低其生命值；
治疗：调用实体的takeHealing()方法，升高其生命值；
召唤：将新实体放入Game.entityList中；
效果：如增益减益，为实体附加一段持续生效、在特定行动后结算、产生一定数值上变化的程序（暂时没有现存的接口）。

同时，从触发方式上，卡牌又可以分为两种：
主动：此类卡牌又称为“可编入卡牌”，能作为手牌参与战斗，与此牌是否能打出没有关系。
> 程序大致逻辑树：(<event.draw> -> <event.cost> ->) <event.use> -> takeEffect()
event.use：使用，可以是play打出，也可以是discard移除；
takeEffect()：起效，按照卡面描述。
被动：卡牌不可被编入卡组，在接收到某信号后调用，通常为0cost（如果出现尖塔那种α→β→γ卡则需要消耗费用）
> 程序大致逻辑树：<some events> -> takeEffect()
some events：手动型的被动卡接收调用者卡牌的信号，自动型的被动卡接收施动/受动信号、回合/游戏的开始/结束信号等。
'''
